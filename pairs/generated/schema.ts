// THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.

import {
  TypedMap,
  Entity,
  Value,
  ValueKind,
  store,
  Bytes,
  BigInt,
  BigDecimal
} from "@graphprotocol/graph-ts";

export class Pair extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));

    this.set("token0", Value.fromString(""));
    this.set("token1", Value.fromString(""));
    this.set("currentprice", Value.fromBigDecimal(BigDecimal.zero()));
    this.set("totalklimaearnedfees", Value.fromBigDecimal(BigDecimal.zero()));
    this.set("totalvolume", Value.fromBigDecimal(BigDecimal.zero()));
    this.set("lastupdate", Value.fromString(""));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save Pair entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        `Entities of type Pair must have an ID of type String but the id '${id.displayData()}' is of type ${id.displayKind()}`
      );
      store.set("Pair", id.toString(), this);
    }
  }

  static load(id: string): Pair | null {
    return changetype<Pair | null>(store.get("Pair", id));
  }

  get id(): string {
    let value = this.get("id");
    return value!.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get token0(): string {
    let value = this.get("token0");
    return value!.toString();
  }

  set token0(value: string) {
    this.set("token0", Value.fromString(value));
  }

  get token1(): string {
    let value = this.get("token1");
    return value!.toString();
  }

  set token1(value: string) {
    this.set("token1", Value.fromString(value));
  }

  get currentprice(): BigDecimal {
    let value = this.get("currentprice");
    return value!.toBigDecimal();
  }

  set currentprice(value: BigDecimal) {
    this.set("currentprice", Value.fromBigDecimal(value));
  }

  get totalklimaearnedfees(): BigDecimal {
    let value = this.get("totalklimaearnedfees");
    return value!.toBigDecimal();
  }

  set totalklimaearnedfees(value: BigDecimal) {
    this.set("totalklimaearnedfees", Value.fromBigDecimal(value));
  }

  get totalvolume(): BigDecimal {
    let value = this.get("totalvolume");
    return value!.toBigDecimal();
  }

  set totalvolume(value: BigDecimal) {
    this.set("totalvolume", Value.fromBigDecimal(value));
  }

  get lastupdate(): string {
    let value = this.get("lastupdate");
    return value!.toString();
  }

  set lastupdate(value: string) {
    this.set("lastupdate", Value.fromString(value));
  }

  get swaps(): Array<string> {
    let value = this.get("swaps");
    return value!.toStringArray();
  }

  set swaps(value: Array<string>) {
    this.set("swaps", Value.fromStringArray(value));
  }
}

export class Token extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));

    this.set("name", Value.fromString(""));
    this.set("symbol", Value.fromString(""));
    this.set("decimals", Value.fromI32(0));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save Token entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        `Entities of type Token must have an ID of type String but the id '${id.displayData()}' is of type ${id.displayKind()}`
      );
      store.set("Token", id.toString(), this);
    }
  }

  static load(id: string): Token | null {
    return changetype<Token | null>(store.get("Token", id));
  }

  get id(): string {
    let value = this.get("id");
    return value!.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get name(): string {
    let value = this.get("name");
    return value!.toString();
  }

  set name(value: string) {
    this.set("name", Value.fromString(value));
  }

  get symbol(): string {
    let value = this.get("symbol");
    return value!.toString();
  }

  set symbol(value: string) {
    this.set("symbol", Value.fromString(value));
  }

  get decimals(): i32 {
    let value = this.get("decimals");
    return value!.toI32();
  }

  set decimals(value: i32) {
    this.set("decimals", Value.fromI32(value));
  }
}

export class Swap extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));

    this.set("open", Value.fromBigDecimal(BigDecimal.zero()));
    this.set("high", Value.fromBigDecimal(BigDecimal.zero()));
    this.set("low", Value.fromBigDecimal(BigDecimal.zero()));
    this.set("close", Value.fromBigDecimal(BigDecimal.zero()));
    this.set("volume", Value.fromBigDecimal(BigDecimal.zero()));
    this.set("lpfees", Value.fromBigDecimal(BigDecimal.zero()));
    this.set("klimaearnedfees", Value.fromBigDecimal(BigDecimal.zero()));
    this.set("slippage", Value.fromBigDecimal(BigDecimal.zero()));
    this.set("timestamp", Value.fromString(""));
    this.set("pair", Value.fromString(""));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save Swap entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        `Entities of type Swap must have an ID of type String but the id '${id.displayData()}' is of type ${id.displayKind()}`
      );
      store.set("Swap", id.toString(), this);
    }
  }

  static load(id: string): Swap | null {
    return changetype<Swap | null>(store.get("Swap", id));
  }

  get id(): string {
    let value = this.get("id");
    return value!.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get open(): BigDecimal {
    let value = this.get("open");
    return value!.toBigDecimal();
  }

  set open(value: BigDecimal) {
    this.set("open", Value.fromBigDecimal(value));
  }

  get high(): BigDecimal {
    let value = this.get("high");
    return value!.toBigDecimal();
  }

  set high(value: BigDecimal) {
    this.set("high", Value.fromBigDecimal(value));
  }

  get low(): BigDecimal {
    let value = this.get("low");
    return value!.toBigDecimal();
  }

  set low(value: BigDecimal) {
    this.set("low", Value.fromBigDecimal(value));
  }

  get close(): BigDecimal {
    let value = this.get("close");
    return value!.toBigDecimal();
  }

  set close(value: BigDecimal) {
    this.set("close", Value.fromBigDecimal(value));
  }

  get volume(): BigDecimal {
    let value = this.get("volume");
    return value!.toBigDecimal();
  }

  set volume(value: BigDecimal) {
    this.set("volume", Value.fromBigDecimal(value));
  }

  get lpfees(): BigDecimal {
    let value = this.get("lpfees");
    return value!.toBigDecimal();
  }

  set lpfees(value: BigDecimal) {
    this.set("lpfees", Value.fromBigDecimal(value));
  }

  get klimaearnedfees(): BigDecimal {
    let value = this.get("klimaearnedfees");
    return value!.toBigDecimal();
  }

  set klimaearnedfees(value: BigDecimal) {
    this.set("klimaearnedfees", Value.fromBigDecimal(value));
  }

  get slippage(): BigDecimal {
    let value = this.get("slippage");
    return value!.toBigDecimal();
  }

  set slippage(value: BigDecimal) {
    this.set("slippage", Value.fromBigDecimal(value));
  }

  get timestamp(): string {
    let value = this.get("timestamp");
    return value!.toString();
  }

  set timestamp(value: string) {
    this.set("timestamp", Value.fromString(value));
  }

  get pair(): string {
    let value = this.get("pair");
    return value!.toString();
  }

  set pair(value: string) {
    this.set("pair", Value.fromString(value));
  }
}
